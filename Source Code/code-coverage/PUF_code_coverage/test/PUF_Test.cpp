//
// Created by Ade Setyawan on 26/04/18.
//

#include <gtest/gtest.h>
#include <gmock/gmock.h>

#include "../src/PUF.h"

using testing::Eq;
using testing::ElementsAre;
using testing::ElementsAreArray;

namespace {
    class PUFTest : public testing::Test {
    public:
        PUF puf;

        PUFTest() {
            puf = PUF();
        }
    };

    class BarTest : public PUFTest,
                    public ::testing::WithParamInterface<const char *> {

    };
}

TEST_F(PUFTest, decode) {
    uint8_t helper_data_default[] = {0x18, 0x98, 0xe, 0x2d, 0xca, 0xa3, 0x3e,
                                     0xec, 0x18, 0xe5, 0xc2, 0x91, 0xa0, 0x28,
                                     0x9, 0x19, 0x39, 0x3c, 0x81, 0x7c, 0x8c,
                                     0x83, 0x5f, 0xae, 0x22, 0xe8, 0x90, 0x9b,
                                     0x44, 0x3d, 0x5f, 0xd3, 0x15, 0xb2, 0xa7,
                                     0x2c, 0x81, 0xdb, 0x8c, 0x61, 0xa4, 0xa8,
                                     0x13, 0x29, 0xf3, 0xe7, 0x87, 0x98, 0x2f,
                                     0xc4, 0xdb, 0xe7, 0x90, 0x89, 0xc0, 0xae,
                                     0x7f, 0xce, 0xf7, 0x99, 0x7e, 0x29, 0x53,
                                     0x5c, 0x81, 0xf9, 0x82, 0x59, 0x45, 0x50,
                                     0xeb, 0x58, 0x1, 0xb2, 0xa6, 0x9a, 0xba,
                                     0x75, 0x1c, 0x72, 0xcb, 0x9f, 0x3d, 0xe3,
                                     0x8c, 0xb3, 0x4a, 0xb7, 0x12, 0x93, 0x57,
                                     0x36, 0x64, 0x3f, 0x84, 0xe6, 0x6b, 0xff,
                                     0x88, 0xb4, 0x13, 0xb4, 0x76, 0xae, 0xd9,
                                     0xd6, 0x6f, 0xdc, 0xc1, 0x32, 0x5, 0xf4,
                                     0xeb, 0x5d, 0x7a, 0x9b, 0xb3, 0x70, 0xfb,
                                     0x5, 0x6b, 0x66, 0x1a, 0xf4, 0xeb, 0x43,
                                     0x5a, 0x34, 0xdc, 0xd4, 0x55, 0xc9, 0x44,
                                     0x39, 0x40, 0xab, 0x54, 0xfc, 0xbb, 0xee,
                                     0xd4, 0x81, 0x48, 0x9d, 0xca, 0x76, 0x66,
                                     0x4a, 0xdd, 0x2, 0xdc, 0x6d, 0x32, 0x81,
                                     0x61, 0x53, 0xd5, 0xc5, 0x65, 0x8f, 0xdb,
                                     0xa4, 0xd0, 0x9e, 0x2b, 0x68, 0x8a, 0x55,
                                     0x1f, 0x19, 0x7a, 0x4f, 0x4a, 0x68, 0x55,
                                     0x6f, 0xf4, 0xfa, 0x32, 0x83, 0x63, 0x77,
                                     0x2d, 0xef, 0x21, 0x5c, 0xe4, 0xe3, 0xa6,
                                     0x7, 0x5, 0xdd, 0x3c, 0x9f, 0x2c, 0x2c,
                                     0xe1, 0x88, 0xd5, 0xc7, 0xc, 0xb5, 0xf,
                                     0xa5, 0x4d, 0xfa, 0xd4, 0x4f, 0xb6, 0xe2,
                                     0x7, 0x99, 0x19, 0x7f, 0x1f, 0x46, 0xf3,
                                     0x3d, 0x8d, 0x82, 0x5a, 0xb3, 0x23, 0x8b,
                                     0xea, 0x8a, 0x18, 0x1b, 0xf8, 0xe3, 0xe,
                                     0x93, 0xd, 0x4b, 0x8d, 0xf1, 0x3f, 0x2,
                                     0x64, 0xcd, 0xb0, 0x2f, 0x97, 0xa6, 0xf5,
                                     0xb2, 0x21, 0x1e, 0xe9, 0x2a, 0x9e, 0x76,
                                     0x36, 0xc1, 0x2c, 0x6b, 0x40, 0xfb, 0xce,
    };

    uint8_t puf_binary[] = {0x4C, 0x97, 0xB2, 0xC6, 0xC1, 0x2E, 0x9A, 0xF6, 0x57, 0x2D, 0x9B, 0xCA, 0xF3, 0x3E, 0xA6,
                            0x5B,
                            0x63, 0xE5, 0x29, 0xF9, 0xBC, 0x60, 0x1A, 0xFF, 0xAD, 0x69, 0x3F, 0x10, 0x48, 0xED, 0x7C,
                            0xEB,
                            0xD5, 0xF, 0xFF, 0xAE, 0xF2, 0xEA, 0xFB, 0xAE, 0x1D, 0xCE, 0x9C, 0xA9, 0xDA, 0x91, 0xD6,
                            0xD8,
                            0x89, 0x96, 0xF7, 0xD6, 0xC8, 0xDF, 0xA, 0xE3, 0x7B, 0xDF, 0xD6, 0xDF, 0xCE, 0xE5, 0x15,
                            0x50,
                            0xB1, 0x7E, 0x4F, 0x43, 0x3A, 0xE3, 0xD2, 0x6C, 0x5F, 0x6E, 0xC3, 0x40, 0xBA, 0x2C, 0x43,
                            0xD0,
                            0xAB, 0xA3, 0xCF, 0x2, 0x1E, 0x40, 0xFE, 0xBB, 0xDE, 0xEC, 0x31, 0xDF, 0x6B, 0x4F, 0xB8,
                            0x43,
                            0xF9, 0x36, 0x8C, 0x65, 0x34, 0xC7, 0x58, 0x0, 0xC6, 0x27, 0x2B, 0x70, 0x94, 0x30, 0x4C,
                            0xB6,
                            0x27, 0x75, 0x1F, 0xE7, 0xA7, 0x67, 0xB7, 0xA6, 0x25, 0xC3, 0xF2, 0xF7, 0xA3, 0x37, 0x54,
                            0xFE,
                            0x3A, 0x94, 0x14, 0x56, 0xEC, 0xF2, 0xE3, 0xA7, 0xE9, 0xBE, 0x9E, 0x3B, 0x7E, 0x91, 0x7A,
                            0xB6,
                            0x8F, 0xCC, 0xFD, 0x5E, 0x2F, 0xF0, 0x69, 0x5C, 0xCA, 0xEC, 0x85, 0x62, 0x6D, 0x89, 0x4E,
                            0x3C,
                            0x3C, 0x65, 0xFF, 0xFB, 0x65, 0xB7, 0x6A, 0x77, 0xE9, 0x4F, 0xDF, 0x46, 0xD2, 0x36, 0xB0,
                            0x46,
                            0xCD, 0x7D, 0xE3, 0x54, 0x57, 0x2F, 0xA6, 0xD0, 0x4F, 0xDB, 0x13, 0x8F, 0x24, 0x22, 0x4A,
                            0x56,
                            0xA7, 0xC3, 0x3E, 0x85, 0xCB, 0x9F, 0xC8, 0x29, 0x46, 0x1C, 0x1E, 0x85, 0xE5, 0xCC, 0xB6,
                            0x80,
                            0xAF, 0xF7, 0x86, 0xFF, 0x76, 0x3E, 0x3C, 0xA7, 0x3E, 0x28, 0x4, 0x97, 0x6F, 0x6F, 0x38,
                            0xEE,
                            0xEA, 0x5, 0x71, 0x8B, 0xA4, 0xAA, 0x76, 0xAC, 0xE9, 0xE5, 0xE5, 0xAD, 0x99, 0xA1, 0xF9,
                            0xC9,
                            0xF, 0xFB, 0x87, 0xF1, 0x54, 0x30, 0x99, 0x76, 0xF8, 0xB0, 0x9E, 0xCC, 0x5F, 0xF6, 0x73,
                            0x91,
                            0xA6, 0x22, 0x7, 0x62, 0x2E, 0xF4, 0x15, 0x9C, 0xA6, 0x73, 0x43, 0xEF, 0x6F, 0xB1, 0x49,
                            0x53,
                            0xA5, 0xC1, 0xE3, 0xFE, 0x5E, 0xC8, 0x38, 0x2F, 0x2, 0x99, 0xC4, 0xAD, 0xE0, 0x1F, 0x81,
                            0xF5,
                            0x6A, 0xAC, 0xE, 0xE, 0x0, 0x0, 0x0, 0x0,};

    memcpy(puf.helper_data_new, helper_data_default, sizeof(puf.helper_data_new));
    memcpy(puf.puf_binary_new, puf_binary, sizeof(puf.puf_binary_new));

    uint8_t key_32[32];
    memset(key_32, 0, sizeof(key_32));

    puf.decode(key_32);

    uint8_t key_256[] = {0x4C, 0x97, 0xB2, 0xC6, 0xC1, 0x2E, 0x9A, 0xF6, 0x57, 0x2D, 0x9B, 0xCA, 0xF3, 0x3E, 0xA6, 0x5B,
                         0x63, 0xE5, 0x29, 0xF9, 0xBC, 0x60, 0x1A, 0xFF, 0xAD, 0x69, 0x3F, 0x10, 0x48, 0xED, 0x7C,
                         0xEB,};

    for (int i = 0; i < 32; i++) {
        ASSERT_EQ(key_32[i], key_256[i]);
    }

}

TEST_F(PUFTest, derive_new_key) {
    string user_password = "password";
    uint8_t final_key[32];
    memset(final_key, 0, sizeof(final_key));

    uint8_t key_32[] = {0x35, 0xe2, 0xf3, 0x12, 0xbd, 0x28, 0xa3, 0x6a, 0x35, 0x9e, 0xb1, 0xa1, 0xe3, 0x7f, 0x21, 0x2d,
                        0x17, 0xda, 0x41, 0xa5, 0xb1, 0x7c, 0xb2, 0xc6, 0x42, 0xf5, 0xfd, 0x8e, 0x42, 0xbb, 0xd4, 0xf0};

    puf.derive_new_key(user_password, final_key, key_32);

    uint8_t final_key_default[32] = {0xc2, 0x89, 0x2f, 0x1b, 0x1d, 0x52, 0xd5, 0x95, 0x49, 0x59, 0x1d, 0x41, 0x0a, 0x40,
                                     0x52, 0x7b, 0x26, 0x5b, 0x91, 0xd4, 0x44, 0xd2, 0x03, 0x2f, 0x28, 0xce, 0x73, 0x74,
                                     0xf7, 0x24, 0x61, 0x52};

    for (int i = 0; i < 32; i++) {
        ASSERT_EQ(final_key[i], final_key_default[i]);
    }
}

TEST_F(PUFTest, encrypt_test) {
    uint8_t final_key[32] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
                             0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
                             0x1e, 0x1f};
    uint8_t plain[16] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee,
                         0xff};
    uint8_t result_default[] = {0x8e, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf, 0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49,
                                0x60, 0x89};
    uint8_t result[16];
    memset(result, 0, sizeof(result));

    puf.encrypt_test(final_key, plain, result);


    for (int i = 0; i < 16; i++) {
        ASSERT_EQ(result[i], result_default[i]);
    }
};

TEST_F(PUFTest, decrypt_test) {
    uint8_t final_key[32] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
                             0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
                             0x1e, 0x1f};
    uint8_t result_default[16] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd,
                                  0xee, 0xff};
    uint8_t cypher[16] = {0x8e, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf, 0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49, 0x60,
                          0x89};
    uint8_t result[16];
    memset(result, 0, sizeof(result));

    puf.decrypt_test(final_key, cypher, result);


    for (int i = 0; i < 16; i++) {
        ASSERT_EQ(result[i], result_default[i]);
    }
};